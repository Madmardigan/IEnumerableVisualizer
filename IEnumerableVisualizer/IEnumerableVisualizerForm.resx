<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        6urq5uDEij0FAYHo6urq6urq6umBAwUufQAAAAAAAACIrpYAAADcAAAAAAAAAOra6gAAAAAAAAAHXcPq
        6urq6urq6urq6uriqaXn6urq6urq6uiBBAAufMQAAAAAAAAAiK6WAAAA3AAAAAAAAADq2uoAAAAAAAAo
        renq6urq6urq6urq6urq6urq6urq6urq6uiBAwAAesPoAAAAAAAAAIiulgAAANwAAAAAAAAA6trqAAAA
        AABGzurq6urq6urq6urq6urq6urq6urq6urq6uiBBAAAAMLo6gAAAAAAAACIrpYAAADcAAAAAAAAAOra
        5AAAAABH2urq6urq6urq6urq6urq6urq6urq6urq6uiBAwAAAADm6uoAAAAAAAAAiK6WAAAA3AAAAAAA
        AADq2s0AAAAm0erq6urq6unJmGJNTFiKveTq6urq6urq6ueBAwAAAAAA6OrqAAAAAAAAAIiulgAAANwA
        AAAAAAAA6uOqOAUMr+rq6urq6shcGAABAQEAAA9Ks+nq6urq6uqrBgAAAAAAAOrq6gAAAAAAAADX6urB
        wcHhfX19fX19ferPdxcAZOrq6urq6p8aAAQRJjU3KBgFAAp54+rq6urq0CYAEEp+jY3q6uqbm5ubm5ub
        6urq6urqtQAAAAAAAADktEsFGMnq6urq6pIJARA0X4icoJRuIwIAAWbl6urq6uqJAAAAAAAA6urqAAAA
        AAAAAOrq6tXV1bUAAAAAAAAA3pMpAGDq6urq6q4NAAAAAAAAAAA4yyQAAAABg+rq6urq0x8AAAAAAOrq
        6gAAAAAAAADq6uoAAAC1AAAAAAAAAM9vEwmx6urq6twyAAMAAAAAAAAAO+ovAAAAABK/6urq6upgAAAA
        AADq6uoAAAAAAAAA6urqAAAAtQAAAAAAAAC8Uwgo2erq6uqSAAYJAAAAAAAAADvqMgAAAAAAW+rq6urq
        ogMAAAAA6urqAAAAAAAAAOrq6gAAALUAAAAAAAAArj8CTOrq6urlQwAXEgAAAAAAAAA76jIAAAAAACHT
        6urq6soVAAAAAOrq6gAAAAAAAADq6uoAAAC1AAAAAAAAAJ4tAWnq6urqzhsBLhkAAAAAAAAAO+oyAAAA
        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
        AAAAAAAAAADl6uoAAAA7AAAAAAAAAOrq6gAAAAAAAAAA4wAAAAAAAAAALeo/AAAAAAAAAJGLhgAAAAAA
        AAAAjQAAAAAAAAAA5erqAAAAOwAAAAAAAADq6uoAAAAAAAAAAOMAAAAAAAAAAC3qPwAAAAAAAACRi4YA
        AAAAAAAAAI0AAAAAAAAAAOXq6gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>